#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

# PREMIGRATE SOURCE DST remote_system_dir vmid dsid template
#  - SOURCE is the host where the VM is running
#  - DST is the host where the VM is to be migrated
#  - remote_system_dir is the path for the VM home in the system datastore
#  - vmid is the id of the VM
#  - dsid is the target datastore
#  - template is the template of the VM in XML and base64 encoded

SRC_HOST=$1
DST_HOST=$2

DST_PATH=$3

VMID=$4
DSID=$5

TEMPLATE_64=$(cat)

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

source $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

#--------------------------------------------------------------------------------

if [ "$SRC_HOST" == "$DST_HOST" ]; then
    log "Not moving $SRC_HOST to $DST_HOST, they are the same host"
    exit 0
fi

#--------------------------------------------------------------------------------

if [ -n "$7" ]; then
    log "Called from tm/$7 but I've nothing to do"
    exit 0
fi

#-------------------------------------------------------------------------------
# Unmap luns from host
#-------------------------------------------------------------------------------

i=1
while read line; do
    DISK_IDS[$i]="$line"
    (( i++ ))
done < <(onevm show $VMID --all | $GREP -w "DISK_ID" | $CUT -d\" -f2)

for j in `seq 1 ${#DISK_IDS[*]}`; do
    XPATH="${DRIVER_PATH}/../../datastore/xpath.rb -b $TEMPLATE_64"

    unset i k XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <($XPATH     /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/SOURCE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/TM_MAD \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/CLONE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/READONLY \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/IMAGE_ID \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/DISK_ID \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/DISK_TYPE \
                        /VM/TEMPLATE/DISK[DISK_ID=${DISK_IDS[$j]}]/DATASTORE_ID \
                        /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

    NAME_WWN=${XPATH_ELEMENTS[k++]}
    TM_MAD=${XPATH_ELEMENTS[k++]}
    CLONE=${XPATH_ELEMENTS[k++]}
    READONLY=${XPATH_ELEMENTS[k++]}
    IMAGE_ID=${XPATH_ELEMENTS[k++]}
    DISK_ID=${XPATH_ELEMENTS[k++]}
    DISK_TYPE=${XPATH_ELEMENTS[k++]}
    IMG_DSID=${XPATH_ELEMENTS[k++]}
    SYS_DSID=${XPATH_ELEMENTS[k++]}

    # Readonly and not clone, so this disk can be used by more VMs at the same time
    if [ "$CLONE" == "NO" ] && [ "$READONLY" == "YES" ]; then
        # check if disk is in use by other VMs
        unset i XPATH_ELEMENTS

        while IFS= read -r -d '' element; do
            XPATH_ELEMENTS[i++]="$element"
        done < <(oneimage show -x $IMAGE_ID| $XPATH /IMAGE/RUNNING_VMS)

        RUNNING_VMS="${XPATH_ELEMENTS[0]}"

        # image is used, so exit
        [ "$RUNNING_VMS" != "1" ] && exit 0
    fi

    if [ "$TM_MAD" = "3par" ]; then
        # if clone or volatile = non-persistent disk
        if [ "$CLONE" == "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
          DSID=$SYS_DSID
        else
          DSID=$IMG_DSID
        fi

        #-------------------------------------------------------------------------------
        # Get ds information
        #-------------------------------------------------------------------------------

        unset i j XPATH_ELEMENTS

        while IFS= read -r -d '' element; do
            XPATH_ELEMENTS[i++]="$element"
        done < <(onedatastore show -x $DSID | $XPATH \
                          /DATASTORE/TEMPLATE/API_ENDPOINT \
                          /DATASTORE/TEMPLATE/IP \
                          /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                          /DATASTORE/TEMPLATE/SEC_IP \
                          /DATASTORE/TEMPLATE/REMOTE_COPY \
                          /DATASTORE/TEMPLATE/NAMING_TYPE)

        API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
        IP="${XPATH_ELEMENTS[j++]:-$IP}"
        SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
        SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
        REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
        NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"

        # if clone or volatile = non-persistent disk
        if [ "$CLONE" == "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
            # get VM disk WWN
            NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                        -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID)

            if [ $? -ne 0 ]; then
              error_message "$NAME_WWN"
              exit 1
            fi
        fi

        NAME=$(get_vv_name "$NAME_WWN")
        WWN=$(get_vv_wwn "$NAME_WWN")

        FLUSH_CMD=$(cat <<EOF
              set -e
              $(remove_lun "$WWN")
EOF
)

        log "Unmapping $NAME_WWN from $SRC_HOST"

        ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
            "Error flushing out mapping"

        python ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                                 -p $PASSWORD -n $NAME -hs $SRC_HOST

        if [ $? -ne 0 ]; then
          error_message "Error unexporting VV"
          exit 1
        fi
    fi
done

migrate_other "$@"

exec_and_log "$SSH $SRC_HOST rm -rf $DST_PATH"

exit 0