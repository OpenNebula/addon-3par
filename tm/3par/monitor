#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to monitor the free and used space of a datastore
###############################################################################

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../../datastore/libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
source ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb -b $DRV_ACTION"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/ID \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DS_DRIVER_ACTION_DATA/MONITOR_VM_DISKS)

CPG="${XPATH_ELEMENTS[0]:-$CPG}"
DSID="${XPATH_ELEMENTS[1]}"
NAMING_TYPE="${XPATH_ELEMENTS[2]:-$NAMING_TYPE}"
MONITOR_VM_DISKS="${XPATH_ELEMENTS[3]}"

# ------------ Compute datastore usage -------------

python ${DRIVER_PATH}/../../datastore/3par/3par.py monitorCPG -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD -c $CPG

if [ $? -ne 0 ]; then
  error_message "Error monitoring CPG"
  exit 1
fi

# exit if monitor vm disks is not required
if [ $MONITOR_VM_DISKS -ne 1 ]; then
  exit 0
fi

# Get images
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage list -x| $XPATH \
                    %m%/IMAGE_POOL/IMAGE/VMS/ID)

VMS=($(echo "${XPATH_ELEMENTS[0]}" | tr " " "\n" | sort | uniq))
VMXML=$(onevm list --extended -x)

DISKS=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getAllVVSize -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                    -p $PASSWORD)

if [ $? -ne 0 ]; then
  error_message "$DISKS"
  exit 1
fi

function searchDisk {
  while IFS= read -r R; do
    R=($R)
    DISK_NAME=${R[0]}

    if [ "$1" == "$DISK_NAME" ]; then
      if [ "$2" == "USED" ]; then
        echo ${R[1]}
      fi
      if [ "$2" == "SNAP" ]; then
        echo ${R[2]}
      fi
    fi
  done <<< "$DISKS"
}

for VMID in ${VMS[@]}; do
  echo -n "VM=[ID=$VMID,POLL=\""

  while IFS= read -r ROW; do
    ROW=($ROW)
    DISK_ID=${ROW[0]}
    CLONE=${ROW[1]}
    SOURCE=${ROW[2]}

    if [ "${CLONE}" == "YES" ] || ([ "${CLONE}" == "NO" ] && [ "${SOURCE}" == "EMPTY" ]); then
      DISK="$NAMING_TYPE.one.vm.$VMID.${DISK_ID}.vv"
    else
      DISK=$(get_vv_name "$SOURCE")
    fi

    diskSize=$(searchDisk "$DISK" "USED")

    echo -n "DISK_SIZE=[ID=${DISK_ID},SIZE=${diskSize}] "

    # snapshots
    while IFS= read -r SNAP_ID; do
      SNAP="$DISK.$SNAP_ID"

      snapSize=$(searchDisk "$SNAP" "SNAP")

      echo -n "SNAPSHOT_SIZE=[ID=${SNAP_ID},DISK_ID=${DISK_ID},SIZE=${snapSize}] "
    done < <(echo "$VMXML"| xmlstarlet sel -t -m "//VM[ID=$VMID][HISTORY_RECORDS/HISTORY/DS_ID=$DS_ID]/SNAPSHOTS[DISK_ID=$DISK_ID]/SNAPSHOT" -v "ID" -n)

  done < <(echo "$VMXML"| xmlstarlet sel -t -m "//VM[ID=$VMID][HISTORY_RECORDS/HISTORY/DS_ID=$DS_ID]/TEMPLATE/DISK" -v "DISK_ID" -o " " --if "CLONE" -v "CLONE" -o " " --else -o "NO " -b --if "SOURCE" -v "SOURCE" --else -o "EMPTY" -b -n )
  
  echo "\"]"
  
done