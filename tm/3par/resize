#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

# resize image size vmid

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get mv and datastore arguments from OpenNebula core ------------

SRC=$1
SIZE=$2
VMID=$3

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$SRC_PATH" | $AWK -F. '$NF!=$0 {print $NF}')

# exit if no disk
[ -z "$DISK_ID" ] && exit 1

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/READONLY \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/DATASTORE_ID \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

NAME_WWN="${XPATH_ELEMENTS[j++]}"
PERSISTENT="${XPATH_ELEMENTS[j++]}"
READONLY="${XPATH_ELEMENTS[j++]}"
IMG_DSID="${XPATH_ELEMENTS[j++]}"
SYS_DSID="${XPATH_ELEMENTS[j++]}"

# Exit if readonly
[ "$READONLY" == "YES" ] && exit 1

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

if [ "$PERSISTENT" != "YES" ]; then
  DSID=$SYS_DSID
else
  DSID=$IMG_DSID
fi

#-------------------------------------------------------------------------------
# Get system ds information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID | $XPATH \
                  /DATASTORE/TEMPLATE/API_ENDPOINT \
                  /DATASTORE/TEMPLATE/IP \
                  /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                  /DATASTORE/TEMPLATE/SEC_IP \
                  /DATASTORE/TEMPLATE/REMOTE_COPY \
                  /DATASTORE/TEMPLATE/NAMING_TYPE)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"

if [ "$PERSISTENT" != "YES" ]; then
  # get VM disk WWN
  NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID)

  if [ $? -ne 0 ]; then
    error_message "$NAME_WWN"
    exit 1
  fi

  # Disable remote copy for non-persistent disk
  REMOTE_COPY="NO"
fi

NAME=$(get_vv_name "$NAME_WWN")
WWN=$(get_vv_wwn "$NAME_WWN")

CURRENT_SIZE=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVVSize -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                               -p $PASSWORD -n $NAME -t VSIZE)

if [ $? -ne 0 ]; then
  error_message "$CURRENT_SIZE"
  exit 1
fi

GROW_SIZE=`expr $SIZE - $CURRENT_SIZE`

# nothing to grow
[ "$GROW_SIZE" == "0" ] && exit 0

log "Resizing disk $NAME by $GROW_SIZE MB"

# resize volume itself
python ${DRIVER_PATH}/../../datastore/3par/3par.py growVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                              -n $NAME -gb $GROW_SIZE -nt $NAMING_TYPE -vi $VMID -rc $REMOTE_COPY

if [ $? -ne 0 ]; then
  error_message "Error resizing VV"
  exit 1
fi

# rescan remote scsi bus
if [ "$REMOTE_COPY" == "YES" ] && [ "$REMOTE_COPY_MODE" == "SYNC" ]; then
    LUN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $API_ENDPOINT -i $IP -sapi $SEC_API_ENDPOINT \
                -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $NAME -hs $SRC_HOST -rc $REMOTE_COPY)

    if [ $? -ne 0 ]; then
      error_message "$LUN"
      exit 1
    fi

    RESCAN_CMD=$(cat <<EOF
        set -e
        $(rescan_scsi_bus "$LUN" "force")
EOF
)

    ssh_exec_and_log "$SRC_HOST" "$RESCAN_CMD" \
      "Error rescaning remote for new size"
fi

# rescan scsi bus and resize multipath device
LUN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                            -n $NAME -hs $SRC_HOST)

if [ $? -ne 0 ]; then
  error_message "$LUN"
  exit 1
fi

RESCAN_CMD=$(cat <<EOF
    set -e
    DEV="3$WWN"

    $(rescan_scsi_bus "$LUN" "force")
    $(multipath_resize "\$DEV")
EOF
)

ssh_exec_and_log "$SRC_HOST" "$RESCAN_CMD" \
    "Error rescaning for new size"