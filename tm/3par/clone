#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to clone the image from the datastore (non-persistent images)
###############################################################################

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get clone and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4

NAME=$(get_vv_name "$SRC")
WWN=$(get_vv_wwn "$SRC")

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${DST_PATH} | cut -d. -f2)

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/NAME \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SIZE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/ORIGINAL_SIZE \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

VM_NAME="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
ORIGINAL_SIZE="${XPATH_ELEMENTS[j++]}"
SYS_DSID="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get system ds information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SYS_DSID| $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/CPG \
                    /DATASTORE/TEMPLATE/THIN \
                    /DATASTORE/TEMPLATE/DEDUP \
                    /DATASTORE/TEMPLATE/COMPRESSION \
                    /DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DATASTORE/TEMPLATE/QOS_ENABLE \
                    /DATASTORE/TEMPLATE/QOS_PRIORITY \
                    /DATASTORE/TEMPLATE/QOS_MAX_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MIN_IOPS \
                    /DATASTORE/TEMPLATE/QOS_MAX_BW \
                    /DATASTORE/TEMPLATE/QOS_MIN_BW \
                    /DATASTORE/TEMPLATE/QOS_LATENCY)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"
QOS_PRIORITY="${XPATH_ELEMENTS[j++]:-$QOS_PRIORITY}"
QOS_MAX_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MAX_IOPS}"
QOS_MIN_IOPS="${XPATH_ELEMENTS[j++]:-$QOS_MIN_IOPS}"
QOS_MAX_BW="${XPATH_ELEMENTS[j++]:-$QOS_MAX_BW}"
QOS_MIN_BW="${XPATH_ELEMENTS[j++]:-$QOS_MIN_BW}"
QOS_LATENCY="${XPATH_ELEMENTS[j++]:-$QOS_LATENCY}"

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

NEW_NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py createVmClone -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                -p $PASSWORD -nt $NAMING_TYPE -tpvv $THIN -tdvv $DEDUP -compr $COMPRESSION -sn $NAME \
                                -vi $VMID -id $DISK_ID -c $CPG -sz $SIZE -co "$VM_NAME")

if [ $? -ne 0 ]; then
  error_message "$NEW_NAME_WWN"
  exit 1
fi

NEW_NAME=$(get_vv_name "$NEW_NAME_WWN")
NEW_WWN=$(get_vv_wwn "$NEW_NAME_WWN")

log "Add disk to VM VV Set"
VVSET=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py addVolumeToVVSet -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                    -nt $NAMING_TYPE -n $NEW_NAME -vi $VMID -co "$VM_NAME")

if [ $? -ne 0 ]; then
  error_message "$VVSET"
  exit 1
fi

if [ "$QOS_ENABLE" == "YES" ]; then
    log "Create QoS Policy"
    QOS=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py createQosPolicy -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                        -nt $NAMING_TYPE -n $NEW_NAME -vi $VMID -qp $QOS_PRIORITY -qxi $QOS_MAX_IOPS -qmi $QOS_MIN_IOPS \
                        -qxb $QOS_MAX_BW -qmb $QOS_MIN_BW -ql $QOS_LATENCY)

    if [ $? -ne 0 ]; then
      error_message "$QOS"
      exit 1
    fi
fi

log "Mapping $NEW_NAME_WWN to $DST_HOST"

LUN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                            -n $NEW_NAME -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$LUN"
  exit 1  
fi

DISCOVER_CMD=$(cat <<EOF
    set -e
    mkdir -p "$DST_DIR"
    $(discover_lun "$LUN" "$NEW_WWN")
    ln -sf "\$DEV" "$DST_PATH"
EOF
)

ssh_make_path $DST_HOST $DST_DIR

ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
    "Error registering $NEW_NAME_WWN to $DST_HOST"