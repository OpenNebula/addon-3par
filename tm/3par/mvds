#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to move an image back to its datastore (persistent images) 
###############################################################################

# mvds host:remote_system_ds/disk.i fe:SOURCE vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get mvds and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4

SRC_PATH="$(arg_path $SRC)"
SRC_HOST="$(arg_host $SRC)"

NAME=$(get_vv_name "$DST")
WWN=$(get_vv_wwn "$DST")

SRC_HOST_3PAR=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py hostExists -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                        -p $PASSWORD -hs $SRC_HOST)

if [ $? -ne 0 ]; then
  error_message "$SRC_HOST_3PAR"
  exit 1
fi

# SRC host is not compute node but frontend, so exit
# image already unmapped by undeploy "mv" script
[ "$SRC_HOST_3PAR" != "1" ] && exit 0

#-------------------------------------------------------------------------------
# Get target ds information
#-------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID | $XPATH \
                        /DATASTORE/TEMPLATE/API_ENDPOINT \
                        /DATASTORE/TEMPLATE/IP \
                        /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                        /DATASTORE/TEMPLATE/SEC_IP \
                        /DATASTORE/TEMPLATE/REMOTE_COPY \
                        /DATASTORE/TEMPLATE/NAMING_TYPE \
                        /DATASTORE/TEMPLATE/QOS_ENABLE)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"

#-------------------------------------------------------------------------------
# Unmap image from host
#-------------------------------------------------------------------------------

FLUSH_CMD=$(cat <<EOF
    set -e
    $(remove_lun "$WWN")
EOF
)

log "Unmapping $DST from $SRC_HOST"

ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
    "Error flushing out mapping"

python ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                        -n $NAME -hs $SRC_HOST

if [ "$REMOTE_COPY" == "YES" ] && [ "$REMOTE_COPY_MODE" == "SYNC" ]; then
    python ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $API_ENDPOINT -i $IP -sapi $SEC_API_ENDPOINT \
                  -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $NAME -hs $SRC_HOST -rc $REMOTE_COPY

    if [ $? -ne 0 ]; then
      error_message "Error unexporting remote VV"
      exit 1
    fi
fi

if [ "$REMOTE_COPY" == "YES" ]; then
    log "Remove disk from Remote Copy group"
    RCG=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py deleteVolumeFromRCGroup -a $API_ENDPOINT -i $IP \
        -sapi $SEC_API_ENDPOINT -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -n $NAME -vi $VMID)

    if [ $? -ne 0 ]; then
      error_message "$RCG"
      exit 1
    fi
else
    log "Remove disk from VM VV Set"
    VVSET=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py deleteVolumeFromVVSet -a $API_ENDPOINT -i $IP -s $SECURE \
                        -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -n $NAME -vi $VMID)

    if [ $? -ne 0 ]; then
      error_message "$VVSET"
      exit 1
    fi
fi