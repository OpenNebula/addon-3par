#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2022, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

# snap_revert host:parent_image snap_id vmid ds_id

SRC=$1
SNAP_ID=$2
VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

# get VM lcm state
LCM_STATE=`lcm_state`
ONLINE=0
# DISK_SNAPSHOT_REVERT_POWEROFF DISK_SNAPSHOT_REVERT_SUSPENDED HOTPLUG_SNAPSHOT_POWEROFF
if [ $LCM_STATE -eq 52 ] || [ $LCM_STATE -eq 55 ] || [ $LCM_STATE -eq 100 ]; then
    ONLINE=1
fi

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${SRC_PATH} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/DISK_TYPE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/DATASTORE_ID \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID \
                    /VM/DEPLOY_ID)

IMAGE_ID="${XPATH_ELEMENTS[j++]}"
NAME_WWN="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
DISK_TYPE="${XPATH_ELEMENTS[j++]}"
IMG_DSID="${XPATH_ELEMENTS[j++]}"
SYS_DSID="${XPATH_ELEMENTS[j++]}"
DEPLOY_ID="${XPATH_ELEMENTS[j++]}"

if [ "$CLONE" != "YES" ]; then
  DISK_ID=$IMAGE_ID
  CLONE=0
fi

#-------------------------------------------------------------------------------
# Get ds information
#-------------------------------------------------------------------------------
# if clone or volatile = non-persistent disk
if [ "$CLONE" == "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
  DSID=$SYS_DSID
else
  DSID=$IMG_DSID
fi

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID | $XPATH \
                  /DATASTORE/TEMPLATE/API_ENDPOINT \
                  /DATASTORE/TEMPLATE/IP \
                  /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                  /DATASTORE/TEMPLATE/SEC_IP \
                  /DATASTORE/TEMPLATE/REMOTE_COPY \
                  /DATASTORE/TEMPLATE/NAMING_TYPE)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"

# if clone or volatile = non-persistent disk
if [ "$CLONE" == "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
  # get VM disk WWN
  NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $API_ENDPOINT -i $IP -s $SECURE \
                                                -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID)

  if [ $? -ne 0 ]; then
    error_message "$NAME_WWN"
    exit 1
  fi

  # Disable remote copy for non-persistent disk
  REMOTE_COPY="NO"
fi

NAME=$(get_vv_name "$NAME_WWN")
WWN=$(get_vv_wwn "$NAME_WWN")

# revert snapshot
log "Reverting snapshot $SNAP_ID; Online: $ONLINE"
python ${DRIVER_PATH}/../../datastore/3par/3par.py revertSnapshot -a $API_ENDPOINT -i $IP -sapi $SEC_API_ENDPOINT \
      -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -id $DISK_ID -vi $VMID -si $SNAP_ID \
      -vc $CLONE -o $ONLINE -rc $REMOTE_COPY

if [ $? -ne 0 ]; then
  error_message "Error promoting snapshot back to VV"
  exit 1
fi
