#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to move images/directories across system_ds in different hosts. When used for the system datastore the script will received the directory 
###############################################################################

# MV <hostA:system_ds/disk.i|hostB:system_ds/disk.i> vmid dsid
#    <hostA:system_ds/|hostB:system_ds/>
#   - hostX is the target host to deploy the VM
#   - system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get mv and datastore arguments from OpenNebula core ------------

SRC=$1
DST=$2

VMID=$3
DSID=$4

SRC=`fix_dir_slashes $SRC`
DST=`fix_dir_slashes $DST`

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

SRC_HOST=`arg_host $SRC`
DST_HOST=`arg_host $DST`

DST_DIR=`dirname $DST_PATH`

SRC_DS_DIR=`dirname  $SRC_PATH`
SRC_VM_DIR=`basename $SRC_PATH`

if [ "$SRC" == "$DST" ]; then
    log "Not moving $SRC to $DST, they are the same path"
    exit 0
fi

LCM_STATE=`lcm_state`

if [ `is_disk $DST_PATH` -eq 0 ]; then
    # VM is in unknown state, SRC_HOST probably in failed state
    if [ $LCM_STATE -eq 60 ] || [ $LCM_STATE -eq 61 ]; then
      log "Not moving files from $SRC_HOST in FT mode"
      exit 0
    fi

    ssh_make_path "$DST_HOST" "$DST_DIR"

    log "Moving $SRC to $DST"
    
    ssh_exec_and_log "$DST_HOST" "rm -rf '$DST_PATH'" \
        "Error removing target path to prevent overwrite errors"
    
    TAR_SSH=$(cat <<EOF
    set -e -o pipefail
    
    $TAR -C $SRC_DS_DIR --sparse -cf - $SRC_VM_DIR | $SSH $DST_HOST '$TAR -C $DST_DIR --sparse -xf -'
    rm -rf $SRC_PATH
EOF
)
    
    ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" "Error copying disk directory to target host"
    
    exit 0
fi

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/DISK_TYPE \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

NAME_WWN="${XPATH_ELEMENTS[j++]}"
IMAGE_ID="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
PERSISTENT="${XPATH_ELEMENTS[j++]}"
DISK_TYPE="${XPATH_ELEMENTS[j++]}"
SYS_DSID="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get system ds information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SYS_DSID | $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP \
                    /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                    /DATASTORE/TEMPLATE/SEC_IP \
                    /DATASTORE/TEMPLATE/REMOTE_COPY \
                    /DATASTORE/TEMPLATE/NAMING_TYPE)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"

# Disk os clone or volatile, so copy was created
if [ "$CLONE" = "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
  #-------------------------------------------------------------------------------
  # Get system ds information
  #-------------------------------------------------------------------------------
  
  unset i j XPATH_ELEMENTS
  
  while IFS= read -r -d '' element; do
      XPATH_ELEMENTS[i++]="$element"
  done < <(onedatastore show -x $SYS_DSID | $XPATH \
                        /DATASTORE/TEMPLATE/API_ENDPOINT \
                        /DATASTORE/TEMPLATE/IP \
                        /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                        /DATASTORE/TEMPLATE/SEC_IP \
                        /DATASTORE/TEMPLATE/REMOTE_COPY \
                        /DATASTORE/TEMPLATE/NAMING_TYPE)
  API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
  IP="${XPATH_ELEMENTS[j++]:-$IP}"
  SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
  SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
  REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
  NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
  
  # get VM disk WWN
  NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID)

  if [ $? -ne 0 ]; then
    error_message "$NAME_WWN"
    exit 1
  fi
fi

NAME=$(get_vv_name "$NAME_WWN")
WWN=$(get_vv_wwn "$NAME_WWN")

#-------------------------------------------------------------------------------
# Start actions
#-------------------------------------------------------------------------------

SRC_HOST_3PAR=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py hostExists -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                        -p $PASSWORD -hs $SRC_HOST)

if [ $? -ne 0 ]; then
  error_message "$SRC_HOST_3PAR"
  exit 1
fi

DST_HOST_3PAR=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py hostExists -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                                                        -p $PASSWORD -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$DST_HOST_3PAR"
  exit 1
fi

# Not persistent and not clone, so this disk can be used by more VMs at the same time
CAN_UNMAP=1
if [ "$PERSISTENT" != "YES" ] && [ "$CLONE" == "NO" ]; then
    # check if disk is in use by other VMs
    unset i XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(oneimage show -x $IMAGE_ID| $XPATH /IMAGE/RUNNING_VMS)

    RUNNING_VMS="${XPATH_ELEMENTS[0]}"

    # image is used, so can't unmap
    [ "$RUNNING_VMS" != "1" ] && CAN_UNMAP=0
fi

if [ "$SRC_HOST_3PAR" == "1" ] && [ "$CAN_UNMAP" == "1" ]; then
    log "Unmapping $WWN from $SRC_HOST"

    # src host in failed state, can not flush disk before unexport
    if [ $LCM_STATE -ne 60 ] && [ $LCM_STATE -ne 61 ]; then
        FLUSH_CMD=$(cat <<EOF
          set -e
          $(remove_lun "$WWN")
EOF
)

        ssh_exec_and_log "$SRC_HOST" "$FLUSH_CMD" \
            "Error flushing out mapping"
    fi

    python ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                -n $NAME -hs $SRC_HOST

    if [ $? -ne 0 ]; then
      error_message "Error unexporting VV"
      exit 1
    fi
fi

if [ "$DST_HOST_3PAR" == "1" ]; then
    log "Mapping $NAME_WWN to $DST_HOST"

    LUN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py exportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                                                -n $NAME -hs $DST_HOST)

    if [ $? -ne 0 ]; then
      error_message "$LUN"
      exit 1
    fi
    
    DISCOVER_CMD=$(cat <<EOF
        set -e
        mkdir -p "$DST_DIR"
        $(discover_lun "$LUN" "$WWN")
        ln -sf "\$DEV" "$DST_PATH"
EOF
)
    
    ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
        "Error registering $NAME_WWN to $DST_HOST"
fi