#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2019, FeldHost™ (feldhost.net)                                   #
#                                                                            #
# Portions copyright 2014-2016, Laurent Grawet <dev@grawet.be>               #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to remove the either system datastore’s directory of the VM or a disk itself 
###############################################################################

# DELETE <host:remote_system_ds/disk.i|host:remote_system_ds/> vmid dsid
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/../../datastore/3par/scripts_3par.sh

# -------- Get delete and datastore arguments from OpenNebula core ------------

DST=$1

VMID=$2
DSID=$3

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`

#-------------------------------------------------------------------------------
# Return if deleting a disk, we will delete them when removing the
# remote_system_ds directory for the VM (remotely)
#-------------------------------------------------------------------------------

log "Deleting $DST_PATH"

delete_file=$(cat <<EOF
[ -e "$DST_PATH" ] || exit 0

times=10
function="rm -rf $DST_PATH"

count=1

ret=\$(\$function)
error=\$?

while [ \$count -lt \$times -a "\$error" != "0" ]; do
    sleep 1
    count=\$(( \$count + 1 ))
    ret=\$(\$function)
    error=\$?
done

[ "x\$error" = "x0" ]
EOF
)

ssh_exec_and_log $DST_HOST "$delete_file" "Error deleting $DST_PATH"

#-------------------------------------------------------------------------------
# Get image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$DST_PATH" | $AWK -F. '$NF!=$0 {print $NF}')

# exit if no disk, just deleting system_ds directory
[ -z "$DISK_ID" ] && exit 0

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/PERSISTENT \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/DISK_TYPE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/IMAGE_ID \
                    /VM/HISTORY_RECORDS/HISTORY[last\(\)]/DS_ID)

NAME_WWN="${XPATH_ELEMENTS[0]}"
PERSISTENT="${XPATH_ELEMENTS[1]}"
CLONE="${XPATH_ELEMENTS[2]}"
DISK_TYPE="${XPATH_ELEMENTS[3]}"
IMAGE_ID="${XPATH_ELEMENTS[4]}"
SYS_DSID="${XPATH_ELEMENTS[5]}"

# Exit if persistent
[ "$PERSISTENT" == "YES" ] && exit 0

# Not persistent and not clone, so this disk can be used by more VMs at the same time
if [ "$CLONE" == "NO" ] && [ "$DISK_TYPE" == "BLOCK" ]; then
    # check if disk is in use by other VMs
    unset i XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(oneimage show -x $IMAGE_ID| $XPATH /IMAGE/RUNNING_VMS)

    RUNNING_VMS="${XPATH_ELEMENTS[0]}"

    # image is used, so exit
    [ "$RUNNING_VMS" != "1" ] && exit 0
fi

#-------------------------------------------------------------------------------
# Get image ds information
#-------------------------------------------------------------------------------

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
  XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID | $XPATH \
                        /DATASTORE/TEMPLATE/API_ENDPOINT \
                        /DATASTORE/TEMPLATE/IP \
                        /DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                        /DATASTORE/TEMPLATE/SEC_IP \
                        /DATASTORE/TEMPLATE/REMOTE_COPY \
                        /DATASTORE/TEMPLATE/NAMING_TYPE \
                        /DATASTORE/TEMPLATE/QOS_ENABLE)

API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"

# if clone or volatile = non-persistent disk, get right name and wwn
if [ "$CLONE" == "YES" ] || [ "$DISK_TYPE" == "FILE" ]; then
    # Disable remote copy for non-persistent disk
    REMOTE_COPY="NO"

    #-------------------------------------------------------------------------------
    # Get system ds information
    #-------------------------------------------------------------------------------

    unset i j XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(onedatastore show -x $SYS_DSID | $XPATH \
                                /DATASTORE/TEMPLATE/API_ENDPOINT \
                                /DATASTORE/TEMPLATE/IP \
                                /DATASTORE/TEMPLATE/NAMING_TYPE \
                                /DATASTORE/TEMPLATE/QOS_ENABLE)

    API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
    IP="${XPATH_ELEMENTS[j++]:-$IP}"
    NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
    QOS_ENABLE="${XPATH_ELEMENTS[j++]:-$QOS_ENABLE}"

    # get VM disk WWN
    NAME_WWN=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py getVmClone -a $API_ENDPOINT -i $IP -s $SECURE \
                                                  -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID)

    if [ $? -ne 0 ]; then
      error_message "$NAME_WWN"
      exit 1
    fi
fi

NAME=$(get_vv_name "$NAME_WWN")
WWN=$(get_vv_wwn "$NAME_WWN")

# Check if DST host is 3PAR host, so compute node
DST_HOST_3PAR=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py hostExists -a $API_ENDPOINT -i $IP -s $SECURE \
                                                          -u $USERNAME -p $PASSWORD -hs $DST_HOST)

if [ $? -ne 0 ]; then
  error_message "$DST_HOST_3PAR"
  exit 1
fi

# if compute node, flush and unmap drive
if [ "$DST_HOST_3PAR" == "1" ]; then
  #-------------------------------------------------------------------------------
  # Unmap non-persistent image from host
  #-------------------------------------------------------------------------------
  
  FLUSH_CMD=$(cat <<EOF
      set -e
      $(remove_lun "$WWN")
EOF
)
  
  log "Unmapping $NAME_WWN from $DST_HOST"
  
  ssh_exec_and_log "$DST_HOST" "$FLUSH_CMD" \
      "Error flushing out mapping"
  
  python ${DRIVER_PATH}/../../datastore/3par/3par.py unexportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                          -p $PASSWORD -n $NAME -hs $DST_HOST

  if [ $? -ne 0 ]; then
    error_message "Error unexporting VV"
    exit 1
  fi
fi

log "Remove disk from VM VV Set"
VVSET=$(python ${DRIVER_PATH}/../../datastore/3par/3par.py deleteVolumeFromVVSet -a $API_ENDPOINT -i $IP -s $SECURE \
                                          -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE -n $NAME -vi $VMID)

if [ $? -ne 0 ]; then
  error_message "$VVSET"
  exit 1
fi

# Exit if not clone and not volatile
[ "$CLONE" == "NO" ] && [ "$DISK_TYPE" == "BLOCK" ] && exit 0

#-------------------------------------------------------------------------------
# Delete non-persistent image copy
#-------------------------------------------------------------------------------

python ${DRIVER_PATH}/../../datastore/3par/3par.py deleteVmClone -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME \
                                            -p $PASSWORD -nt $NAMING_TYPE -vi $VMID -id $DISK_ID