#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2022, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to create a new empty image in the datastore
###############################################################################

# ------------ Set up the environment to source common tools ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/scripts_3par.sh

# -------- Get mkfs and datastore arguments from OpenNebula core ------------

if [ -n "$2" ]; then
    DRV_ACTION="$1"
    ID="$2"
else
    DRV_ACTION="$(cat)"
    ID="$1"
fi

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/ID \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/IP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NAMING_TYPE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_IP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/REMOTE_COPY \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/THIN \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DEDUP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/COMPRESSION \
                    /DS_DRIVER_ACTION_DATA/IMAGE/NAME \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PERSISTENT \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/FS)

DSID="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
NAMING_TYPE="${XPATH_ELEMENTS[j++]:-$NAMING_TYPE}"
CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
SEC_CPG="${XPATH_ELEMENTS[j++]:-$SEC_CPG}"
THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
NAME="${XPATH_ELEMENTS[j++]}"
PERSISTENT="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]:-0}"
FSTYPE="${XPATH_ELEMENTS[j++]}"

# ------------ Create image -------------

NAME_WWN=$(python ${DRIVER_PATH}/3par.py createVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD -nt $NAMING_TYPE \
                                    -tpvv $THIN -tdvv $DEDUP -compr $COMPRESSION -id $ID -c $CPG -sz $SIZE -co "$NAME")

if [ $? -ne 0 ]; then
  error_message "$NAME_WWN"
  exit 1
fi

NAME=$(get_vv_name "$NAME_WWN")
WWN=$(get_vv_wwn "$NAME_WWN")

# ----------- Add image to RC Group -------
# only non-persistent images
if [ "$PERSISTENT" == "0" ] && [ "$REMOTE_COPY" == "YES" ]; then
    log "Add image to remote copy group"
    RCG=$(python ${DRIVER_PATH}/3par.py addVolumeToRCGroup -a $API_ENDPOINT -i $IP \
      -sapi $SEC_API_ENDPOINT -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $NAME \
      -c $CPG -sc $SEC_CPG -rcm $REMOTE_COPY_MODE -rcgn "$NAMING_TYPE.one.ds.$DSID" -rcha "NO")

    if [ $? -ne 0 ]; then
      error_message "$RCG"
      exit 1
    fi
fi

# Filesystem defined, so we need format disk
if [ -n "$FSTYPE" ]; then
  if [ "$FSTYPE" == "xfs" ] || [ "$FSTYPE" == "ext4" ] || [ "$FSTYPE" == "ext3" ] || [ "$FSTYPE" == "ext2" ]; then
    DST_HOST=`get_destination_host $ID`

    if [ -z "$DST_HOST" ]; then
        error_message "Datastore template missing 'BRIDGE_LIST' attribute."
        exit 1
    fi

    # Map image
    log "Mapping $WWN to $DST_HOST"

    LUN=$(python ${DRIVER_PATH}/3par.py exportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD -n $NAME -hs $DST_HOST)

    if [ $? -ne 0 ]; then
      error_message "$LUN"
      exit 1
    fi

    log "Discover $WWN and format it to fs: $FSTYPE"
    DISCOVER_CMD=$(cat <<EOF
        set -e
        $(discover_lun "$LUN" "$WWN")

        sudo /usr/sbin/mkfs -t "$FSTYPE" "\$DEV"
EOF
)

    ssh_exec_and_log "$DST_HOST" "$DISCOVER_CMD" \
        "Error registering $WWN to $DST_HOST"

    # Unmap image
    log "Unmapping $WWN from $DST_HOST"

    FLUSH_CMD=$(cat <<EOF
        set -e
        $(remove_lun "$WWN")
EOF
)

    ssh_exec_and_log "$DST_HOST" "$FLUSH_CMD" \
        "Error flushing out mapping"

    python ${DRIVER_PATH}/3par.py unexportVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD -n $NAME -hs $DST_HOST
  fi
fi

echo $NAME_WWN
