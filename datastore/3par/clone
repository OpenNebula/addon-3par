#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2022, FeldHostâ„¢ (feldhost.net)                                   #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

###############################################################################
# This script is used to clone an image
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/3par/3par.conf
. ${DRIVER_PATH}/scripts_3par.sh

# preserve vars from conf file
CONF_API_ENDPOINT="$API_ENDPOINT"
CONF_IP="$IP"

# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/STAGING_DIR \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/ID \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/IP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_API_ENDPOINT \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_IP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/REMOTE_COPY \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SEC_CPG \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/THIN \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DEDUP \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/COMPRESSION \
                    /DS_DRIVER_ACTION_DATA/IMAGE/NAME \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PERSISTENT \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/CLONING_ID)

BASE_PATH="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
SAFE_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
STAGING_DIR="${XPATH_ELEMENTS[j++]:-/var/tmp}"
DSID="${XPATH_ELEMENTS[j++]}"
API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$API_ENDPOINT}"
IP="${XPATH_ELEMENTS[j++]:-$IP}"
CPG="${XPATH_ELEMENTS[j++]:-$CPG}"
SEC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$SEC_API_ENDPOINT}"
SEC_IP="${XPATH_ELEMENTS[j++]:-$SEC_IP}"
REMOTE_COPY="${XPATH_ELEMENTS[j++]:-$REMOTE_COPY}"
SEC_CPG="${XPATH_ELEMENTS[j++]:-$SEC_CPG}"
THIN="${XPATH_ELEMENTS[j++]:-$THIN}"
DEDUP="${XPATH_ELEMENTS[j++]:-$DEDUP}"
COMPRESSION="${XPATH_ELEMENTS[j++]:-$COMPRESSION}"
NAME="${XPATH_ELEMENTS[j++]//[^A-Za-z0-9\[\]() _~+-]/}"
PERSISTENT="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
CLONING_ID="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get source image datastore id and source
#-------------------------------------------------------------------------------
XPATH="${DRIVER_PATH}/../xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $CLONING_ID | $XPATH \
                /IMAGE/DATASTORE_ID \
                /IMAGE/SOURCE)

SRC_DS_ID="${XPATH_ELEMENTS[j++]}"
SRC_NAME_WWN="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Get source image ds information
#-------------------------------------------------------------------------------
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $SRC_DS_ID | $XPATH \
                    /DATASTORE/TEMPLATE/API_ENDPOINT \
                    /DATASTORE/TEMPLATE/IP)

SRC_API_ENDPOINT="${XPATH_ELEMENTS[j++]:-$CONF_API_ENDPOINT}"
SRC_IP="${XPATH_ELEMENTS[j++]:-$CONF_IP}"

# clone between storage systems
if [ "$SRC_IP" != "$IP" ]; then
  # get dst host from bridge list
  DST_HOST=`get_destination_host $ID`

  if [ -z "$DST_HOST" ]; then
      error_message "Datastore template missing 'BRIDGE_LIST' attribute."
      exit 1
  fi

  set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

  # prepare tmp dest
  IMAGE_HASH=`generate_image_hash`
  TMP_DST="$STAGING_DIR/$IMAGE_HASH"

  # extract VV Name and Wwn
  SRC_NAME=$(get_vv_name "$SRC_NAME_WWN")
  SRC_WWN=$(get_vv_wwn "$SRC_NAME_WWN")

  log "Mapping $SRC_NAME to $DST_HOST"
  LUN=$(python ${DRIVER_PATH}/3par.py exportVV -a "$SRC_API_ENDPOINT" -i "$SRC_IP" -s "$SECURE" -u "$USERNAME" \
                      -p "$PASSWORD" -n "$SRC_NAME" -hs "$DST_HOST")

  if [ $? -ne 0 ]; then
    error_message "$LUN"
    exit 1
  fi

  map_lun "$DST_HOST" "$LUN" "$SRC_WWN" "$STAGING_DIR" "$TMP_DST"

  # Create image
  NAME_WWN=$(python ${DRIVER_PATH}/3par.py createVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                            -nt $NAMING_TYPE -tpvv $THIN -tdvv $DEDUP -compr $COMPRESSION -id $ID \
                                            -c $CPG -sz $SIZE -co "$NAME")

  NEW_NAME=$(get_vv_name "$NAME_WWN")
  NEW_WWN=$(get_vv_wwn "$NAME_WWN")

  # export new vv and clone old one to it
  LUN=$(export_vv "$NEW_NAME" "$DST_HOST")
  map_and_copy_to_lun "$DST_HOST" "$SRC_WWN" "$LUN" "$NEW_WWN"

  # unexport new vv
  unmap_lun "$DST_HOST" "$NEW_WWN"
  unexport_vv "$NEW_NAME" "$DST_HOST"

  # unexport src vv
  unmap_lun "$DST_HOST" "$SRC_WWN"

  log "Unexporting $SRC_NAME from $DST_HOST"
  RESULT=$(python ${DRIVER_PATH}/3par.py unexportVV -a "$SRC_API_ENDPOINT" -i "$SRC_IP" -s "$SECURE" -u "$USERNAME" \
                                -p "$PASSWORD" -n "$SRC_NAME" -hs "$DST_HOST")

  if [ $? -ne 0 ]; then
    error_message "$RESULT"
    exit 1
  fi

  # cleanup
  CLEANUP_CMD=$(cat <<EOF
      # remove original
      $RM -f $TMP_DST
EOF
)

  ssh_exec_and_log "$DST_HOST" "$CLEANUP_CMD" \
      "Error performing cleanup on $DST_HOST"
else
  # -------- Clone image ------------
  NAME_WWN=$(python ${DRIVER_PATH}/3par.py cloneVV -a $API_ENDPOINT -i $IP -s $SECURE -u $USERNAME -p $PASSWORD \
                                  -snt $NAMING_TYPE -sid $CLONING_ID -nt $NAMING_TYPE -id $ID \
                                  -tpvv $THIN -tdvv $DEDUP -compr $COMPRESSION -c $CPG -sz $SIZE -co "$NAME")

  if [ $? -ne 0 ]; then
    error_message "$NAME_WWN"
    exit 1
  fi
fi

#-------------------------------------------------------------------------------
# Clone operation take a while and in meantime, persistent attr can be changed
# so check again, for image persistent state
#-------------------------------------------------------------------------------
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $ID| $XPATH /IMAGE/PERSISTENT)

PERSISTENT="${XPATH_ELEMENTS[j++]}"

# ----------- Add image to RC Group -------
# only non-persistent images
if [ "$PERSISTENT" == "0" ] && [ "$REMOTE_COPY" == "YES" ]; then
    VV_NAME=$(get_vv_name "$NAME_WWN")

    log "Add image to remote copy group"
    RCG=$(python ${DRIVER_PATH}/3par.py addVolumeToRCGroup -a $API_ENDPOINT -i $IP \
      -sapi $SEC_API_ENDPOINT -sip $SEC_IP -s $SECURE -u $USERNAME -p $PASSWORD -n $VV_NAME \
      -c $CPG -sc $SEC_CPG -rcm $REMOTE_COPY_MODE -rcgn "$NAMING_TYPE.one.ds.$DSID" -rcha "NO")

    if [ $? -ne 0 ]; then
      error_message "$RCG"
      exit 1
    fi
fi

echo $NAME_WWN
